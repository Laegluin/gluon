let process @ { cmd, pipe, Child } = import! std.process.prim
let { CommandOption, Stdio } = import! std.process.prim.types
let { Option } = import! std.option
let { map } = import! std.functor
let { flat_map, (>>=) } = import! std.monad
let { wrap } = import! std.applicative
let { sequence } = import! std.traversable
let { index, ? } = import! std.array
let io @ { ? } = import! std.io


type ExitCode = Option Int

let exit_code_to_io : ExitCode -> IO () = process.exit_code_to_io
let join : Child -> IO ExitCode = process.join

let join_all processes : Array Child -> IO (Array ExitCode) =
    sequence io.applicative (map join processes)

let spawn program args opts : String -> Array String -> Array CommandOption -> IO Child =
    do child = pipe [cmd program args opts]
    wrap (index child 0)

let run program args : String -> Array String -> IO () =
    spawn program args [] >>= join >>= exit_code_to_io

let is_success exit_code : ExitCode -> Bool =
    match exit_code with
    | Some code -> code == 0
    | None -> False


{ 
    ExitCode,
    CommandOption,
    Stdio,
    join,
    join_all,
    exit_code_to_io,
    spawn,
    run,
    is_success,
    ..process 
}
